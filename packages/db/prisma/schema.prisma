// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @default(uuid()) @id
  email         String   @unique
  password      String
  name          String
  photo         String?
  rooms         Room[]   // rooms created/administarted by this user
  chats         Chat[]
  memberships   RoomMember[] // rooms that user belongs to
}

model Room {
  id          Int @default(autoincrement()) @id
  slug        String   @unique
  adminId     String
  admin       User   @relation(fields: [adminId], references: [id])
  chats       Chat[]  
  members     RoomMember[] // all users in the room
  createdAt   DateTime  @default(now())
}

model Chat {
  id          Int @default(autoincrement()) @id
  message     String
  roomId      Int
  room        Room @relation(fields: [roomId], references: [id])
  userId      String
  user        User  @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
}

model RoomMember {
  id            Int    @id  @default(autoincrement())
  userId        String
  roomId        Int

  user          User    @relation(fields: [userId], references: [id])
  room          Room    @relation(fields: [roomId], references: [id])

  role          String  @default("member") 
  joinedAt      DateTime  @default(now())

  @@unique([userId, roomId]) // prevent duplicate memberships
}